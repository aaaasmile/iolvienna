todo:
Aggiungi la view che vien da un template statico per l'app di react.
Come punto di partenza guarda: https://hakaselogs.me/2018-04-20/building-a-web-app-with-go-gin-and-react/

== SQLITE3 e golang
Il modulo fts5 non  funziona di default, come si fa ad averlo?
Si usa questa command line:
go run --tags "fts5" .\main.go
e per il build:
go build --tags "fts5" .\main.go

== Testa la api del service
Apri una WLC e lancia:
curl -X POST http://localhost:5568/iol/do?req=oca

== SQL
select rowid,text from playsearch where text MATCH "oca"

Poi eseguo la query con i campi di iol_post
select user_name, date_published from playsearch inner join iol_post ON playsearch.playsrowid = iol_post.rowid where playsearch.text MATCH "oca";

Per verdere chi ha scritto più post (primi 20), si usa:
select count(id) as thecount, user_name from iol_post group by user_name ORDER BY thecount DESC LIMIT 20;

Per avere i 10 post seguenti ad una data si usa:
select date_published,id, post_content from iol_post where date_published > '2003-10-31T15:10:00.000Z' ORDER BY date_published  LIMIT(10) ;
Da notare che se si usa > id o post_id non funziona in quanto non hanno una struttura fissa come la data.
Per questa funzione ho creato un indice:
CREATE INDEX idx_iolpost_pubdate ON iol_post(date_published);
Che viene usato nella select di prima:
EXPLAIN QUERY PLAN select date_published,id, post_content from iol_post where date_published > '2003-10-31T15:10:00.000Z' ORDER BY date_published  LIMIT(10) ;
--SEARCH TABLE iol_post USING COVERING INDEX idx_iolpost_pubdate (date_published>?)

Qeullo che si diceva 10 anni fa:
select date_published,id from iol_post where date_published > '2008-11-20T00:10:00.000Z' AND date_published < '2008-11-20T23:59:00.000Z' ORDER BY date_published  LIMIT(100) ;

== Deployment su hetz
Copiato il db in ~/app/go/iol-service/db
Ora ho fatto il checkout della repository in ~/app/go/iol-service/ con:
git clone https://github.com/aaaasmile/iolvienna.git
cd iolvienna
Qui posso aggiornare la repository con git pull. Una volta pronto per la nuova versione, uso:
go build --tags "fts5"
Poi sposto il file iolvienna in ../iolvienna.bin. Non dimenticare la dir static e il config.toml
Ora il service è pronto per essere usato dietro ad un nginx (vedi readme_Hetzner.txt).
~/app/go/iol-service/iolvienna.bin

== React
Ho usato index.html come contenitore del mio client sviluppato in react. Index.html l'ho messo come template
per avere la possibilità di gestire del codice via server. Quindi l'app in jsx va a finire sotto la dir
static/js. Babel non va incluso in prod nel file index, ma prima va compilato il file jsx usando per esempio
babel-cli. Come? Sono andato nella dir ../node (D:\scratch\go-lang\iol-vienna\node) ed ho installato babel-cli:
npm install @babel-cli @babel-core 
e tutta una serie di react e babel con la chicocciola. Solo quelli con la chiocciola hanno funzionato (babel ver 0.7).
Guarda il file ../node/package.json per vedere quello che è stato installato e come funziona il comando build.
Ora posso usare 
PS D:\scratch\go-lang\iol-vienna\node> npm run build
Il file .babelrc non serve in quanto uso la cli direttamente dal file package.json.
Il quale esamina la dir static/js e compila in static/dist.
Con il file compilato è possibile rimovere babel da index.html ed usare app.js alla fine del body in index.html.


